{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RCCG GT TECH. HUB\\\\Desktop\\\\Univelcity-Backend\\\\Frontend-Backend Ecommerce-store\\\\frontend\\\\src\\\\Context\\\\Econtext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\n\n// Function to initialize cart items\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getCart = () => {\n  // Try to get the cart from local storage\n  const storedCart = localStorage.getItem(\"cartData\");\n  if (storedCart) {\n    // Parse the stored cart if it exists\n    return JSON.parse(storedCart);\n  } else {\n    // Return an empty object if no cart is stored\n    return {};\n  }\n};\n\n// Create context for global state management\nexport const EContext = /*#__PURE__*/createContext(null);\nconst EContextProvider = props => {\n  _s();\n  // State for all products and cart items\n  const [all_product, setAllProduct] = useState([]);\n  const [cartItems, setCartItems] = useState(getCart);\n  async function fetchProducts() {\n    try {\n      const response = await fetch(\"http://localhost:5000/allproducts\");\n      const data = await response.json();\n      setAllProduct(data);\n      // Store the product data in localStorage\n      localStorage.setItem(\"productData\", JSON.stringify(data));\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      // Handle the error appropriately\n    }\n  }\n\n  // Fetch all products and cart data on component mount\n  useEffect(() => {\n    // Fetch all products from the server\n    fetchProducts();\n\n    // Check if user is logged in and fetch cart data if available\n    if (localStorage.getItem(\"auth-token\")) {\n      fetch(\"http://localhost:5000/getdataforcart\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/form-data\",\n          \"auth-token\": `${localStorage.getItem(\"auth-token\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: \"\"\n      }).then(response => response.json()).then(data => {\n        // Check if the server response contains a 'cartData' property\n        if (data.cartData) {\n          setCartItems(data.cartData);\n        } else {\n          console.log(\"No cart data received from the server\");\n          setCartItems([]); // Set cartItems to an empty array\n        }\n      }).catch(error => {\n        console.error(\"Error fetching cart data:\", error);\n        setCartItems([]); // Set cartItems to an empty array on error\n      });\n    }\n    console.log(localStorage.getItem(\"cartData\"));\n  }, []);\n\n  // Function to add items to the cart\n  const addToCart = itemId => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: (prev[itemId] || 0) + 1\n    }));\n\n    // Store cart data in localStorage\n    const cartData = JSON.parse(localStorage.getItem(\"cartData\") || \"{}\");\n    cartData[itemId] = (cartData[itemId] || 0) + 1;\n    localStorage.setItem(\"cartData\", JSON.stringify(cartData));\n\n    // If the user is logged in, send request to server to update cart data\n    const authToken = localStorage.getItem(\"auth-token\");\n    if (authToken) {\n      fetch(\"http://localhost:5000/addtocart\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/form-data\",\n          \"auth-token\": authToken,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          itemId: itemId\n        })\n      }).then(response => response.json()).then(data => console.log(data));\n    }\n  };\n\n  // Function to remove items from the cart\n  const removeFromCart = itemId => {\n    // Update local state\n    setCartItems(prev => {\n      const updatedCart = {\n        ...prev\n      };\n      if (updatedCart[itemId] > 1) {\n        updatedCart[itemId] -= 1;\n      } else {\n        delete updatedCart[itemId];\n      }\n      return updatedCart;\n    });\n\n    // Update cart data in localStorage\n    const cartData = JSON.parse(localStorage.getItem(\"cartData\") || \"{}\");\n    if (cartData[itemId] > 1) {\n      cartData[itemId] -= 1;\n    } else {\n      delete cartData[itemId];\n    }\n    localStorage.setItem(\"cartData\", JSON.stringify(cartData));\n\n    // If the user is logged in, send request to server to update cart data\n    const authToken = localStorage.getItem(\"auth-token\");\n    if (authToken) {\n      fetch(\"http://localhost:5050/removefromcart\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/form-data\",\n          \"auth-token\": authToken,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          itemId: itemId\n        })\n      }).then(response => response.json()).then(data => {\n        if (data.success) {\n          console.log(\"Item removed from cart\");\n        } else {\n          console.error(\"Error removing item from cart\");\n        }\n      }).catch(error => {\n        console.error(\"Error removing item from cart:\", error);\n      });\n    }\n  };\n\n  // Write a clear cart function\n  const clearCart = () => {\n    setCartItems([]); // Set cartItems to an empty array\n    localStorage.removeItem(\"cartData\");\n\n    // If the user is logged in, send request to server to clear cart data\n    const authToken = localStorage.getItem(\"auth-token\");\n    if (authToken) {\n      fetch(\"http://localhost:5050/clearcart\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/form-data\",\n          \"auth-token\": authToken,\n          \"Content-Type\": \"application/json\"\n        },\n        body: \"\"\n      }).then(response => response.json()).then(data => {\n        if (data.success) {\n          console.log(\"Cart cleared successfully\");\n        } else {\n          console.error(\"Error clearing cart\");\n        }\n      }).catch(error => {\n        console.error(\"Error clearing cart:\", error);\n      });\n    } else {\n      localStorage.removeItem(\"cartData\");\n      console.log(\"Cart cleared successfully\");\n    }\n  };\n\n  // Function to calculate total item count in the cart\n  const getTotalItemCount = () => {\n    let total = 0;\n    const cartItemValues = Object.values(cartItems);\n    for (let i = 0; i < cartItemValues.length; i++) {\n      if (cartItemValues[i] > 0) {\n        const itemId = Object.keys(cartItems)[i];\n        const itemDetail = all_product.find(product => product.id === Number(itemId));\n        total += itemDetail.new_price * cartItemValues[i];\n      }\n    }\n    return total;\n  };\n\n  // Function to calculate total count of items in the cart\n  const getTotalCount = () => {\n    let total = 0;\n    const cartItemValues = Object.values(cartItems);\n    for (let i = 0; i < cartItemValues.length; i++) {\n      if (cartItemValues[i] > 0) {\n        const itemId = Object.keys(cartItems)[i];\n        const itemDetail = all_product.find(product => product.id === Number(itemId));\n        console.log(itemDetail);\n        total += cartItemValues[i];\n      }\n    }\n    return total;\n  };\n\n  // Context value containing all necessary functions and state\n  const contextValue = {\n    getTotalCount,\n    getTotalItemCount,\n    all_product,\n    cartItems,\n    addToCart,\n    removeFromCart,\n    clearCart\n  };\n\n  // Provide context value to child components\n  return /*#__PURE__*/_jsxDEV(EContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(EContextProvider, \"/yF9VjywG5Lv3py+InwBEEUO1VM=\");\n_c = EContextProvider;\nexport default EContextProvider;\nvar _c;\n$RefreshReg$(_c, \"EContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jsxDEV","_jsxDEV","getCart","storedCart","localStorage","getItem","JSON","parse","EContext","EContextProvider","props","_s","all_product","setAllProduct","cartItems","setCartItems","fetchProducts","response","fetch","data","json","setItem","stringify","error","console","method","headers","Accept","body","then","cartData","log","catch","addToCart","itemId","prev","authToken","removeFromCart","updatedCart","success","clearCart","removeItem","getTotalItemCount","total","cartItemValues","Object","values","i","length","keys","itemDetail","find","product","id","Number","new_price","getTotalCount","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/RCCG GT TECH. HUB/Desktop/Univelcity-Backend/Frontend-Backend Ecommerce-store/frontend/src/Context/Econtext.jsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\n\r\n// Function to initialize cart items\r\nconst getCart = () => {\r\n  // Try to get the cart from local storage\r\n  const storedCart = localStorage.getItem(\"cartData\");\r\n  if (storedCart) {\r\n    // Parse the stored cart if it exists\r\n    return JSON.parse(storedCart);\r\n  } else {\r\n    // Return an empty object if no cart is stored\r\n    return {};\r\n  }\r\n};\r\n\r\n// Create context for global state management\r\nexport const EContext = createContext(null);\r\n\r\nconst EContextProvider = (props) => {\r\n  // State for all products and cart items\r\n  const [all_product, setAllProduct] = useState([]);\r\n  const [cartItems, setCartItems] = useState(getCart);\r\n\r\n  async function fetchProducts() {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/allproducts\");\r\n      const data = await response.json();\r\n      setAllProduct(data);\r\n      // Store the product data in localStorage\r\n      localStorage.setItem(\"productData\", JSON.stringify(data));\r\n    } catch (error) {\r\n      console.error(\"Error fetching products:\", error);\r\n      // Handle the error appropriately\r\n    }\r\n  }\r\n\r\n  // Fetch all products and cart data on component mount\r\n  useEffect(() => {\r\n  // Fetch all products from the server\r\n  fetchProducts();\r\n\r\n  // Check if user is logged in and fetch cart data if available\r\n  if (localStorage.getItem(\"auth-token\")) {\r\n    fetch(\"http://localhost:5000/getdataforcart\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/form-data\",\r\n        \"auth-token\": `${localStorage.getItem(\"auth-token\")}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: \"\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Check if the server response contains a 'cartData' property\r\n        if (data.cartData) {\r\n          setCartItems(data.cartData);\r\n        } else {\r\n          console.log(\"No cart data received from the server\");\r\n          setCartItems([]); // Set cartItems to an empty array\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching cart data:\", error);\r\n        setCartItems([]); // Set cartItems to an empty array on error\r\n      });\r\n  }\r\n  console.log(localStorage.getItem(\"cartData\"));\r\n}, []);\r\n\r\n\r\n  // Function to add items to the cart\r\n  const addToCart = (itemId) => {\r\n    setCartItems((prev) => ({ ...prev, [itemId]: (prev[itemId] || 0) + 1 }));\r\n\r\n    // Store cart data in localStorage\r\n    const cartData = JSON.parse(localStorage.getItem(\"cartData\") || \"{}\");\r\n    cartData[itemId] = (cartData[itemId] || 0) + 1;\r\n    localStorage.setItem(\"cartData\", JSON.stringify(cartData));\r\n\r\n    // If the user is logged in, send request to server to update cart data\r\n    const authToken = localStorage.getItem(\"auth-token\");\r\n    if (authToken) {\r\n      fetch(\"http://localhost:5000/addtocart\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/form-data\",\r\n          \"auth-token\": authToken,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ itemId: itemId }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => console.log(data));\r\n    }\r\n  };\r\n\r\n  // Function to remove items from the cart\r\n  const removeFromCart = (itemId) => {\r\n    // Update local state\r\n    setCartItems((prev) => {\r\n      const updatedCart = { ...prev };\r\n      if (updatedCart[itemId] > 1) {\r\n        updatedCart[itemId] -= 1;\r\n      } else {\r\n        delete updatedCart[itemId];\r\n      }\r\n      return updatedCart;\r\n    });\r\n\r\n    // Update cart data in localStorage\r\n    const cartData = JSON.parse(localStorage.getItem(\"cartData\") || \"{}\");\r\n    if (cartData[itemId] > 1) {\r\n      cartData[itemId] -= 1;\r\n    } else {\r\n      delete cartData[itemId];\r\n    }\r\n    localStorage.setItem(\"cartData\", JSON.stringify(cartData));\r\n\r\n    // If the user is logged in, send request to server to update cart data\r\n    const authToken = localStorage.getItem(\"auth-token\");\r\n    if (authToken) {\r\n      fetch(\"http://localhost:5050/removefromcart\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/form-data\",\r\n          \"auth-token\": authToken,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ itemId: itemId }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.success) {\r\n            console.log(\"Item removed from cart\");\r\n          } else {\r\n            console.error(\"Error removing item from cart\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error removing item from cart:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  // Write a clear cart function\r\n  const clearCart = () => {\r\n    setCartItems([]); // Set cartItems to an empty array\r\n    localStorage.removeItem(\"cartData\");\r\n\r\n    // If the user is logged in, send request to server to clear cart data\r\n    const authToken = localStorage.getItem(\"auth-token\");\r\n    if (authToken) {\r\n      fetch(\"http://localhost:5050/clearcart\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/form-data\",\r\n          \"auth-token\": authToken,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: \"\",\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.success) {\r\n            console.log(\"Cart cleared successfully\");\r\n          } else {\r\n            console.error(\"Error clearing cart\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error clearing cart:\", error);\r\n        });\r\n    } else {\r\n      localStorage.removeItem(\"cartData\");\r\n      console.log(\"Cart cleared successfully\");\r\n    }\r\n  };\r\n\r\n  // Function to calculate total item count in the cart\r\n  const getTotalItemCount = () => {\r\n    let total = 0;\r\n    const cartItemValues = Object.values(cartItems);\r\n\r\n    for (let i = 0; i < cartItemValues.length; i++) {\r\n      if (cartItemValues[i] > 0) {\r\n        const itemId = Object.keys(cartItems)[i];\r\n        const itemDetail = all_product.find(\r\n          (product) => product.id === Number(itemId)\r\n        );\r\n        total += itemDetail.new_price * cartItemValues[i];\r\n      }\r\n    }\r\n\r\n    return total;\r\n  };\r\n\r\n  // Function to calculate total count of items in the cart\r\n  const getTotalCount = () => {\r\n    let total = 0;\r\n    const cartItemValues = Object.values(cartItems);\r\n\r\n    for (let i = 0; i < cartItemValues.length; i++) {\r\n      if (cartItemValues[i] > 0) {\r\n        const itemId = Object.keys(cartItems)[i];\r\n        const itemDetail = all_product.find(\r\n          (product) => product.id === Number(itemId)\r\n        );\r\n        console.log(itemDetail);\r\n        total += cartItemValues[i];\r\n      }\r\n    }\r\n    return total;\r\n  };\r\n\r\n  // Context value containing all necessary functions and state\r\n  const contextValue = {\r\n    getTotalCount,\r\n    getTotalItemCount,\r\n    all_product,\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    clearCart,\r\n  };\r\n\r\n  // Provide context value to child components\r\n  return (\r\n    <EContext.Provider value={contextValue}>{props.children}</EContext.Provider>\r\n  );\r\n};\r\n\r\nexport default EContextProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}